apiVersion: v1
kind: Service
metadata:
  name: voting
spec:
  type: LoadBalancer
  ports:
    - port: 80
      nodePort: 30069
      targetPort: 80
  selector:
    app: voting
    type: front-end


# This code is also written in YAML and describes a Kubernetes Service manifest.
# apiVersion: Specifies the version of the Kubernetes API being used. Again, it's v1.
# kind: Specifies the type of Kubernetes resource being defined. Here, it's Service, indicating that this YAML defines a Service.
# metadata: Contains metadata about the Service, such as its name.
# name: Specifies the name of the Service as voting.
# spec: Describes the desired state of the Service.
# type: Specifies the type of Service. Here, it's LoadBalancer, which means Kubernetes should use the cloud provider's load balancer to expose the Service externally.
# ports: Specifies the ports that the Service will listen on.
# port: 80: Specifies that the Service will listen on port 80.
# nodePort: 30069: Specifies the node port to which the Service should be exposed externally. When the Kubernetes cluster is running in environments such as AWS or GCP, this node port is used by the cloud provider's load balancer to route traffic to the Service.
# targetPort: 80: Specifies the port on the Pods to which traffic should be forwarded. In this case, it's port 80, which is the default port for the "voting" application.
# Selector: Imagine you have a bunch of Pods in your Kubernetes cluster, but you want your Service to specifically direct traffic to only certain Pods, not all of them. That's where the selector comes in.